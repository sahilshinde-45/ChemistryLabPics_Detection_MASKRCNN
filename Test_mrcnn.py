# -*- coding: utf-8 -*-
"""Final_MRCNN.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uuUijoqUp5pbgPsBwOLeSQWHIspk8wHh
"""

# from google.colab import drive
# drive.mount('/content/drive')

import random
from torchvision.models.detection.faster_rcnn import FastRCNNPredictor
import numpy as np
import torch.utils.data
import cv2
import torchvision.models.segmentation
import torch
import os
import matplotlib.pyplot as plt
from google.colab.patches import cv2_imshow
from torch.utils.tensorboard import SummaryWriter
import keras
import skimage.io

batchSize=2
imageSize=[600,600]

imgPath = "/content/Image.jpg"

model = torchvision.models.detection.maskrcnn_resnet50_fpn(pretrained=True)
in_features = model.roi_heads.box_predictor.cls_score.in_features
model.roi_heads.box_predictor = FastRCNNPredictor(in_features,num_classes=2)
model.load_state_dict(torch.load("Final.torch", map_location=torch.device('cpu')))
model.eval()

images = cv2.imread(imgPath)
images = cv2.resize(images, imageSize, cv2.INTER_LINEAR)
images = torch.as_tensor(images, dtype=torch.float32).unsqueeze(0)
images = images.swapaxes(1, 3).swapaxes(2, 3)
images = list(image for image in images)

with torch.no_grad():
    pred = model(images)

im = images[0].swapaxes(0, 2).swapaxes(0, 1).detach().cpu().numpy().astype(np.uint8)
im2 = im.copy()
im3 = im.copy()

im2

boxes = pred[0]['boxes'].cpu().numpy()
masks = pred[0]['masks'].cpu().numpy()
class_ids = pred[0]['labels'].cpu().numpy()
scores = pred[0]['scores'].cpu().numpy()

print("Boxes shape:", boxes.shape)
print("Masks shape:", masks.shape)
print("Class IDs shape:", class_ids.shape)

import numpy as np
import matplotlib.pyplot as plt
import random

# Threshold score for displaying masks
threshold_score = 0.8

# Initialize a black background image
background = np.zeros_like(im2)

# Initializing a list to store annotations
annotations = []

# Initializing a list to store rectangle coordinates
rectangles = []

# Initializing a color map to assign random colors to different masks
color_map = {}

for i in range(len(pred[0]['masks'])):
    msk = pred[0]['masks'][i, 0].detach().cpu().numpy()
    scr = pred[0]['scores'][i].detach().cpu().numpy()

    if scr > threshold_score:
        # Generating a random color for the mask
        color = tuple(random.randint(0, 255) for _ in range(3))

        masked_region = np.zeros_like(im2)
        masked_region[msk > 0.5] = color

        background += masked_region

        nonzero_indices = np.nonzero(msk)
        ymin, ymax = np.min(nonzero_indices[0]), np.max(nonzero_indices[0])
        xmin, xmax = np.min(nonzero_indices[1]), np.max(nonzero_indices[1])


        rectangles.append((xmin, ymin, xmax, ymax))

        annotations.append(f'Mask {i+1}: Score {scr:.2f}')
        print(f'Mask {i+1}: Score {scr:.2f}')

        color_map[f'Mask {i+1}'] = color


plt.imshow(np.hstack([im, background]))
plt.axis('off')  # Optional: Hide axis

# Add annotations to the image with respective colors
for idx, annotation in enumerate(annotations):
    color = tuple(comp / 255.0 for comp in color_map[annotation.split(":")[0].strip()])  # Convert color to Matplotlib format
    plt.annotate(annotation, xy=(10, 30 * (idx + 1)), color=color, fontsize=12)

# Add rectangle boxes to the image
for xmin, ymin, xmax, ymax in rectangles:
    rect = plt.Rectangle((xmin, ymin), xmax - xmin, ymax - ymin, linewidth=2, edgecolor='red', facecolor='none')
    plt.gca().add_patch(rect)

plt.show()

for i in range(len(pred[0]['masks'])):
    msk=pred[0]['masks'][i,0].detach().cpu().numpy()
    scr=pred[0]['scores'][i].detach().cpu().numpy()
    if scr>0.8 :
        im3[:,:,0][msk>0.5] = random.randint(0,255)
        im3[:, :, 1][msk > 0.5] = random.randint(0,255)
        im3[:, :, 2][msk > 0.5] = random.randint(0, 255)

plt.imshow(np.hstack([im, im3]))
plt.axis('off')  # Optional: Hide axis
plt.show()